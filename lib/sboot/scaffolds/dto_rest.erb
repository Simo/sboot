package <%= @package %>.business.dtos;

<% if @entity.primary_key.is_uuid? -%>import java.util.UUID;<% end -%>
import <%= @package %>.persistence.entities.<%= @entity.name.split('_').collect(&:capitalize).join %>;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
<% if @entity.datetype -%>
		import java.text.ParseException;
		import java.text.DateFormat;
		import java.text.SimpleDateFormat;
		import java.util.Calendar;
		import java.util.Date;
<% end -%>

@ApiModel(value = "<%= @entity.name.split('_').collect(&:capitalize).join %>", description = "Un oggetto <%= @entity.name.split('_').collect(&:capitalize).join %>")
public class <%= @entity.name.split('_').collect(&:capitalize).join %>DTO {

    <% @entity.properties.each do |property| %>
		<% if property[:constraint] == 'pk'-%>
		@ApiModelProperty(value = "Identificativo univoco per un entita' <%= @entity.name.split('_').collect(&:capitalize).join %>")
		private <%= @entity.primary_key.type %> <%= @entity.primary_key.name %>;
		<% else -%>
		@ApiModelProperty(value = "<%= property.camel_rather_dash firstLetter: 'downcase' %> di <%= @entity.name.split('_').collect(&:capitalize).join %>")
    private <%= property.dto_type %> <%= property.camel_rather_dash firstLetter: 'downcase' %>;
		<% end -%>
    <% end %>

    public <%= @entity.name.split('_').collect(&:capitalize).join %>DTO(){}

    public <%= @entity.name.split('_').collect(&:capitalize).join %>DTO(<%= @entity.name.split('_').collect(&:capitalize).join %> entity){
		<% @entity.properties.each do |property| -%>
		<% unless property.date_type? -%>
				this.<%= property.camel_rather_dash firstLetter: 'downcase' %> = entity.get<%= property.camel_rather_dash firstLetter: 'upcase' %>();
		<% else -%>
				this.<%= property.camel_rather_dash firstLetter: 'downcase' %> = this.toString(entity.get<%= property.camel_rather_dash firstLetter: 'upcase' %>());
		<% end -%>
		<% end -%>
    }

    public <%= @entity.name.split('_').collect(&:capitalize).join %> convert() <% if @entity.datetype -%>throws ParseException <% end -%>{
        <%= @entity.name.split('_').collect(&:capitalize).join %> entity = new <%= @entity.name.split('_').collect(&:capitalize).join %>();
				<% @entity.properties.each do |property| -%>
				<% unless property.peculiar_type? -%>
				entity.set<%= property.camel_rather_dash firstLetter: 'upcase' %>(this.<%= property.camel_rather_dash firstLetter: 'downcase' %>);
				<% else -%>
				entity.set<%= property.camel_rather_dash firstLetter: 'upcase' %>(toDate(this.<%= property.camel_rather_dash firstLetter: 'downcase' %>));
				<% end -%>
				<% end -%>
        return entity;
    }

    <% @entity.properties.each do |property| -%>
    public <%= property.dto_type %> get<%= property.camel_rather_dash firstLetter: 'upcase' %>() {
        return <%= property.camel_rather_dash firstLetter: 'downcase' %>;
    }

    public void set<%= property.camel_rather_dash firstLetter: 'upcase' %>(<%= property.dto_type %> <%= property.camel_rather_dash firstLetter: 'downcase' %>) {
        this.<%= property.camel_rather_dash firstLetter: 'downcase' %> = <%= property.camel_rather_dash firstLetter: 'downcase' %>;
    }
		<% end -%>

<% if @entity.datetype -%>
		public Date toDate(String dateString) throws ParseException {
		DateFormat formatter = new SimpleDateFormat("dd/MM/yyyy");
		Date dateToBeReturned = formatter.parse(dateString);
		return dateToBeReturned;
		}

		public String toString(Date dateDate){
		DateFormat formatter = new SimpleDateFormat("dd/MM/yyyy");
		String dateToBeReturned = formatter.format(dateDate);
		return dateToBeReturned;
		}
<% end -%>
}
