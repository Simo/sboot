package <%= @package %>.web.api.controllers;

import java.util.List;
import java.util.Locale;
import javax.validation.Valid;
import <%= @package %>.business.dtos.MessageDTO;
import <%= @package %>.business.dtos.<%= @name.capitalize %>DTO;
import <%= @package %>.business.services.exceptions.EntityNotFoundException;
import <%= @package %>.business.services.<%= @name.capitalize %>Service;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.MessageSource;
import org.springframework.context.i18n.LocaleContextHolder;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.web.bind.MethodArgumentNotValidException;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.bind.annotation.RestController;

@RestController
@RequestMapping("/api/<%= @name.downcase %>")
@Api("/api/<%= @name.downcase %>")
public class <%= @name.capitalize %>Controller {
  
    @Autowired
    private <%= @name.capitalize %>Service service;
    @Autowired
    private MessageSource messageSource;

    @RequestMapping(method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)
    @ApiOperation(value = "Trova tutte le <%= @name.capitalize %>", notes = "Recupera la lista di tutte le <%= @name.capitalize %>", response = <%= @name.capitalize %>DTO[].class)
    @ApiResponses({
        @ApiResponse(code = 200, message = "Success", response = <%= @name.capitalize %>DTO[].class)
    })
    public List<<%= @name.capitalize %>DTO> findAll() {
        return service.findAll();
    }

    @RequestMapping(method = RequestMethod.POST, consumes = MediaType.APPLICATION_JSON_VALUE, produces = MediaType.APPLICATION_JSON_VALUE)
    @ApiOperation(value = "Crea nuova <%= @name.capitalize %>", notes = "Crea una nuova <%= @name.capitalize %>", response = <%= @name.capitalize %>DTO.class)
    @ApiResponses({
        @ApiResponse(code = 200, message = "Success", response = <%= @name.capitalize %>DTO.class),
        @ApiResponse(code = 400, message = "Bad request", response = MessageDTO.class)
    })
    public <%= @name.capitalize %>DTO create(
            @ApiParam(required = true, name = "<%= @name.downcase %>", value = "New <%= @name.downcase %>")
            @Valid @RequestBody <%= @name.capitalize %>DTO dto) {
        return service.create(dto);
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.PUT, consumes = MediaType.APPLICATION_JSON_VALUE, produces = MediaType.APPLICATION_JSON_VALUE)
    @ApiOperation(value = "Esegui update <%= @name.capitalize %>", notes = "Aggiorna una <%= @name.capitalize %> esistente", response = <%= @name.capitalize %>DTO.class)
    @ApiResponses({
        @ApiResponse(code = 200, message = "Success", response = <%= @name.capitalize %>DTO.class),
        @ApiResponse(code = 400, message = "Bad request", response = MessageDTO.class),
        @ApiResponse(code = 404, message = "Not found", response = MessageDTO.class)
    })
    public <%= @name.capitalize %>DTO update(
            @ApiParam(required = true, name = "id", value = "ID della <%= @name.capitalize %> che si vuole aggiornare", defaultValue = "0")
            @PathVariable Long id,
            @ApiParam(required = true, name = "<%= @name.downcase %>", value = "")
            @Valid @RequestBody <%= @name.capitalize %>DTO dto) {
        return service.update(id, dto);
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE, produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.NO_CONTENT)
    @ApiOperation(value = "Cancella <%= @name.downcase %>", notes = "Cancella una <%= @name.capitalize %> esistente")
    @ApiResponses({
        @ApiResponse(code = 204, message = "Success"),
        @ApiResponse(code = 404, message = "Not found", response = MessageDTO.class)
    })
    public void delete(
            @ApiParam(required = true, name = "id", value = "ID della <%= @name.capitalize %> da cancellare")
            @PathVariable Long id) {
        service.delete(id);
    }

    @ResponseStatus(HttpStatus.BAD_REQUEST)
    @ExceptionHandler(MethodArgumentNotValidException.class)
    public MessageDTO handleValidationException(MethodArgumentNotValidException ex) {
        Locale locale = LocaleContextHolder.getLocale();
        String code = ex.getBindingResult().getFieldError().getDefaultMessage();
        return new MessageDTO(messageSource.getMessage(code, null, locale));
    }

    @ResponseStatus(HttpStatus.BAD_REQUEST)
    @ExceptionHandler(EntityNotFoundException.class)
    public MessageDTO handleNotFoundException(EntityNotFoundException ex) {
        String[] parameters = {Long.toString(ex.getId())};
        Locale locale = LocaleContextHolder.getLocale();
        return new MessageDTO(messageSource.getMessage("exception.EntityNotFound.description", parameters, locale));
    }
}
