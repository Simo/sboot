package <%= @package %>.web.controllers.api;

import <%= @package %>.business.dtos.<%= @entity.name.split('_').collect(&:capitalize).join %>DTO;
import <%= @package %>.business.services.<%= @entity.name.split('_').collect(&:capitalize).join %>Service;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.MediaType;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;
import org.springframework.test.web.servlet.result.MockMvcResultMatchers;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.springframework.web.context.WebApplicationContext;

import java.util.ArrayList;
import java.util.List;
<% if @entity.primary_key.is_uuid? -%>import java.util.UUID;<% end -%>
<% if @entity.primary_key.type == 'String' -%>import java.util.UUID;<% end -%>

import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.view;

import static org.assertj.core.api.Assertions.*;
import static org.mockito.Mockito.*;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;

import static org.hamcrest.Matchers.*;

@RunWith(SpringRunner.class)
@SpringBootTest
@AutoConfigureMockMvc
public class <%= @entity.name.split('_').collect(&:capitalize).join %>ControllerTest {

    @Autowired
    private MockMvc mockMvc;
    @MockBean
    private <%= @entity.name.split('_').collect(&:capitalize).join %>Service mockService;

    private <%= @entity.primary_key.type %> primary_key;

    @Autowired
    private ObjectMapper objectMapper;

    @Autowired
    private WebApplicationContext webApplicationContext;

    private List<<%= @entity.name.split('_').collect(&:capitalize).join %>DTO> lista = new ArrayList<<%= @entity.name.split('_').collect(&:capitalize).join %>DTO>();

    <%= @entity.name.split('_').collect(&:capitalize).join %>DTO <%= @entity.single_downcase %>1;

    @Before
    public void setUp() throws Exception {
        this.primary_key = <%= @entity.fixture_pk %>;
        <%= @entity.single_downcase %>1 = new <%= @entity.name.split('_').collect(&:capitalize).join %>DTO();
        <% @entity.properties.each do |property| -%>
          <% if property[:constraint] == 'pk' -%>
          <%= @entity.single_downcase %>1.set<%= property[:name].capitalize %>(primary_key);
          <% else -%>
          <%= @entity.single_downcase %>1.set<%= property[:name].capitalize %>(<%= property.fixture %>);
          <% end -%>
        <% end -%>
        lista.add(<%= @entity.single_downcase %>1);
    }

    @Test
    public void findAll() throws Exception {
      assertThat(this.mockService).isNotNull();
      when(mockService.trovaTutti()).thenReturn(lista);
      this.mockMvc.perform(MockMvcRequestBuilders.get("/api/<%= @entity.collection_downcase %>")
        .accept(MediaType.APPLICATION_JSON_UTF8)
        .header("Access-Control-Request-Method", "GET")
        .header("Origin", "http://localhost:8080"))
        .andExpect(status().isOk())
        .andExpect(content().contentType(MediaType.APPLICATION_JSON_UTF8))
        .andExpect(jsonPath("$.length()", is(1)))
        <% @entity.properties.each do |property| -%>
          .andExpect(jsonPath("$[0].<%= property.name %>", is(<%= @entity.single_downcase %>1.get<%= property[:name].capitalize %>()<% if property.type == 'Long' -%>.intValue()<% end -%>)))
        <% end -%>
        .andDo(print());
    }

    @Test
    public void show() throws Exception {
      assertThat(this.mockService).isNotNull();
      when(mockService.trova(primary_key)).thenReturn(this.<%= @entity.single_downcase %>1);
      this.mockMvc.perform(MockMvcRequestBuilders.get("/api/<%= @entity.collection_downcase %>/"+<%= @entity.single_downcase %>1.get<%= @entity.primary_key.name.capitalize %>().toString())
        .header("Access-Control-Request-Method", "GET")
        .header("Origin", "http://localhost:8080")
        .accept(MediaType.APPLICATION_JSON_UTF8))
        .andExpect(status().isOk())
        <% @entity.properties.each do |property| -%>
        .andExpect(jsonPath("$.<%= property.name %>", is(<%= @entity.single_downcase %>1.get<%= property[:name].capitalize %>()<% if property.type == 'Long' %>.intValue()<% end -%>)))
        <% end -%>
        .andDo(print());
    }

    @Test
    public void delete() throws Exception {
        assertThat(this.mockService).isNotNull();
        <%= @entity.name.split('_').collect(&:capitalize).join %>DTO <%= @entity.single_downcase %>Delete = new <%= @entity.name.split('_').collect(&:capitalize).join %>DTO();
        <% @entity.properties.each do |property| -%>
          <% if property[:constraint] == 'pk' -%>
          <%= @entity.single_downcase %>Delete.set<%= property[:name].capitalize %>(primary_key);
          <% else -%>
          <%= @entity.single_downcase %>Delete.set<%= property[:name].capitalize %>(<%= property.fixture %>);
          <% end -%>
        <% end -%>
        when(mockService.cancella(<%= @entity.single_downcase %>Delete.get<%= @entity.primary_key.name.capitalize %>())).thenReturn(null);
        this.mockMvc.perform(MockMvcRequestBuilders.delete("/api/<%= @entity.collection_downcase %>/"+<%= @entity.single_downcase %>Delete.get<%= @entity.primary_key.name.capitalize %>().toString())
        .header("Access-Control-Request-Method", "DELETE")
        .header("Origin", "http://localhost:8080")
        .accept(MediaType.APPLICATION_JSON_UTF8))
        .andExpect(status().is(204))
        .andDo(print());
    }

    @Test
    public void create() throws Exception {
      assertThat(this.mockService).isNotNull();
      when(mockService.salva(any())).thenReturn(<%= @entity.single_downcase %>1);
      this.mockMvc.perform(MockMvcRequestBuilders.post("/api/<%= @entity.collection_downcase %>")
        .contentType(MediaType.APPLICATION_JSON)
        .content(objectMapper.writeValueAsBytes(<%= @entity.single_downcase %>1))
        .accept(MediaType.APPLICATION_JSON_UTF8)
        .header("Access-Control-Request-Method", "POST")
        .header("Origin", "http://localhost:8080"))
        .andExpect(status().isCreated())
        .andDo(print());
    }

    @Test
    public void update() throws Exception {
    assertThat(this.mockService).isNotNull();
      when(mockService.salva(any())).thenReturn(<%= @entity.single_downcase %>1);
      this.mockMvc.perform(MockMvcRequestBuilders.put("/api/<%= @entity.collection_downcase %>/"+<%= @entity.single_downcase %>1.get<%= @entity.primary_key.name.capitalize %>().toString())
        .contentType(MediaType.APPLICATION_JSON)
        .content(objectMapper.writeValueAsBytes(<%= @entity.single_downcase %>1))
        .accept(MediaType.APPLICATION_JSON_UTF8)
        .header("Access-Control-Request-Method", "PUT")
        .header("Origin", "http://localhost:8080"))
        .andExpect(status().isOk())
        .andDo(print());
    }
}
