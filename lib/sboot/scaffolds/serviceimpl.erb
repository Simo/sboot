package <%= @package %>.business.services.impl;

import <%= @package %>.business.dtos.<%= @name.split('_').collect(&:capitalize).join %>DTO;
import <%= @package %>.business.services.<%= @name.split('_').collect(&:capitalize).join %>Service;
import <%= @package %>.business.exceptions.EntityNotFoundException;
import <%= @package %>.persistence.entities.<%= @name.split('_').collect(&:capitalize).join %>;
import <%= @package %>.persistence.repositories.<%= @name.split('_').collect(&:capitalize).join %>Repository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.ArrayList;
import java.util.List;

@Service
public class <%= @name.split('_').collect(&:capitalize).join %>ServiceImpl implements <%= @name.split('_').collect(&:capitalize).join %>Service {

private <%= @name.split('_').collect(&:capitalize).join %>Repository repository;

@Autowired
public <%= @name.split('_').collect(&:capitalize).join %>ServiceImpl(<%= @name.split('_').collect(&:capitalize).join %>Repository repo){
this.repository = repo;
}

@Override
public List<<%= @name.split('_').collect(&:capitalize).join %>DTO> trovaTutti() {
	List<<%= @name.split('_').collect(&:capitalize).join %>> source = repository.findAll();
	List<<%= @name.split('_').collect(&:capitalize).join %>DTO> dtos = new ArrayList<<%= @name.split('_').collect(&:capitalize).join %>DTO>();
	for (<%= @name.split('_').collect(&:capitalize).join %> entity : source){
	<%= @name.split('_').collect(&:capitalize).join %>DTO dto = new <%= @name.split('_').collect(&:capitalize).join %>DTO(entity);
	dtos.add(dto);
	}
	return dtos;
	}

	@Override
	public <%= @name.split('_').collect(&:capitalize).join %>DTO trova(Long id) {
	return new <%= @name.split('_').collect(&:capitalize).join %>DTO(this.findOneSafe(id));
	}

	@Override
	public <%= @name.split('_').collect(&:capitalize).join %>DTO salva(<%= @name.split('_').collect(&:capitalize).join %>DTO model) {
	return new <%= @name.split('_').collect(&:capitalize).join %>DTO(repository.save(model.convert()));
	}

	@Override
	@Transactional
	public Long cancella(Long id) {
	return repository.deleteById(id);
	}

	private <%= @name.split('_').collect(&:capitalize).join %> findOneSafe(Long id) {
	<%= @name.split('_').collect(&:capitalize).join %> entity = repository.findOne(id);
	if (entity == null) {
	throw new EntityNotFoundException(<%= @name.split('_').collect(&:capitalize).join %>.class.getName(),id);
	} else {
	return entity;
	}
	}
	}
