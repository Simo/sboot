package <%= @package %>.web.controllers;

import <%= @package %>.business.dtos.<%= @entity.name.split('_').collect(&:capitalize).join %>DTO;
import <%= @package %>.business.services.<%= @entity.name.split('_').collect(&:capitalize).join %>Service;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;

import static org.assertj.core.api.Assertions.*;
import static org.mockito.Mockito.*;

import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.view;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.MediaType;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;
import org.springframework.test.web.servlet.result.MockMvcResultMatchers;
import org.springframework.web.context.WebApplicationContext;

import java.util.ArrayList;
import java.util.List;
<% if @entity.primary_key.is_uuid? -%>import java.util.UUID;<% end -%>

@RunWith(SpringRunner.class)
@SpringBootTest
@AutoConfigureMockMvc
public class <%= @entity.name.split('_').collect(&:capitalize).join %>ControllerTest {

    @Autowired
    private MockMvc mockMvc;
    @MockBean
    private <%= @entity.name.split('_').collect(&:capitalize).join %>Service mockService;

    private <%= @entity.primary_key.type %> primary_key;

    @Autowired
    private WebApplicationContext webApplicationContext;

    private List<<%= @entity.name.split('_').collect(&:capitalize).join %>DTO> lista = new ArrayList<<%= @entity.name.split('_').collect(&:capitalize).join %>DTO>();

    <%= @entity.name.split('_').collect(&:capitalize).join %>DTO <%= @entity.single_downcase %>1;

    @Before
    public void setUp() throws Exception {
        this.primary_key = <%= @entity.fixture_pk %>;
        <%= @entity.single_downcase %>1 = new <%= @entity.name.split('_').collect(&:capitalize).join %>DTO();
<% @entity.properties.each do |property| -%>
<%   unless property.is_fk? -%>
<%     if property[:constraint] == 'pk' -%>
        <%= @entity.single_downcase %>1.set<%= property.java_class_name %>(primary_key);
<%     else -%>
        <%= @entity.single_downcase %>1.set<%= property.java_class_name %>(<%= property.fixture %>);
<%     end -%>
<%   end -%>
<% end -%>
        lista.add(<%= @entity.single_downcase %>1);
    }

    @Test
    public void index() throws Exception {
        assertThat(this.mockService).isNotNull();
        when(mockService.trovaTutti()).thenReturn(lista);
        this.mockMvc.perform(MockMvcRequestBuilders.get("/<%= @entity.collection_downcase %>").accept(MediaType.TEXT_HTML_VALUE)
                .header("Access-Control-Request-Method", "GET")
                .header("Origin", "http://localhost:8080"))
                .andExpect(status().isOk())
            .andExpect(view().name("<%= @entity.collection_downcase %>/index"))
            .andExpect(MockMvcResultMatchers.model().attributeExists("<%= @entity.collection_downcase collide: false %>"))
            .andExpect(MockMvcResultMatchers.model().attribute("<%= @entity.collection_downcase collide: false %>", lista))
            .andDo(print());
    }

    @Test
    public void dettaglio() throws Exception {
        assertThat(this.mockService).isNotNull();
        when(mockService.trova(primary_key)).thenReturn(this.<%= @entity.single_downcase %>1);
        this.mockMvc.perform(MockMvcRequestBuilders.get("/<%= @entity.collection_downcase %>/"+<%= @entity.single_downcase %>1.get<%= @entity.as_class_name @entity.primary_key.name %>())
                .header("Access-Control-Request-Method", "GET")
                .header("Origin", "http://localhost:8080")
                .accept(MediaType.TEXT_HTML_VALUE))
                .andExpect(status().isOk())
            .andExpect(view().name("<%= @entity.collection_downcase %>/show"))
            .andExpect(MockMvcResultMatchers.model().attributeExists("<%= @entity.single_downcase %>"))
            .andExpect(MockMvcResultMatchers.model().attribute("<%= @entity.single_downcase %>", <%= @entity.single_downcase %>1))
            .andDo(print());
    }

    @Test
    public void nuovo() throws Exception {
        assertThat(this.mockService).isNotNull();
        this.mockMvc.perform(MockMvcRequestBuilders.get("/<%= @entity.collection_downcase %>/new")
                .header("Access-Control-Request-Method", "GET")
                .header("Origin", "http://localhost:8080")
                .accept(MediaType.TEXT_HTML_VALUE))
            .andExpect(status().isOk())
            .andExpect(view().name("<%= @entity.collection_downcase %>/new"))
            .andExpect(MockMvcResultMatchers.model().attributeExists("<%= @entity.single_downcase %>"))
            .andDo(print());
    }

    @Test
    public void modifica() throws Exception {
        assertThat(this.mockService).isNotNull();
        when(mockService.trova(primary_key)).thenReturn(this.<%= @entity.single_downcase %>1);
        this.mockMvc.perform(MockMvcRequestBuilders.get("/<%= @entity.collection_downcase %>/"+<%= @entity.single_downcase %>1.get<%= @entity.as_class_name @entity.primary_key.name %>()+"/edit")
                .header("Access-Control-Request-Method", "GET")
                .header("Origin", "http://localhost:8080")
                .accept(MediaType.TEXT_HTML_VALUE))
                .andExpect(status().isOk())
            .andExpect(view().name("<%= @entity.collection_downcase %>/edit"))
            .andExpect(MockMvcResultMatchers.model().attributeExists("<%= @entity.single_downcase %>"))
            .andExpect(MockMvcResultMatchers.model().attribute("<%= @entity.single_downcase %>", <%= @entity.single_downcase %>1))
            .andDo(print());
    }

    @Test
    public void salvaPost() throws Exception {
        assertThat(this.mockService).isNotNull();

        <%= @entity.name.split('_').collect(&:capitalize).join %>DTO <%= @entity.single_downcase %>New = new <%= @entity.name.split('_').collect(&:capitalize).join %>DTO();
<% @entity.properties.each do |property| -%>
<%   unless property.is_fk? -%>
<%     if property[:constraint] == 'pk' -%>
        <%= @entity.single_downcase %>New.set<%= property.java_class_name %>(primary_key);
<%     else -%>
        <%= @entity.single_downcase %>New.set<%= property.java_class_name %>(<%= property.fixture %>);
<%     end -%>
<%   end -%>
<% end -%>
        <%= @entity.name.split('_').collect(&:capitalize).join %>DTO <%= @entity.single_downcase %>New2 = new <%= @entity.name.split('_').collect(&:capitalize).join %>DTO();
<% @entity.properties.each do |property| -%>
<%   unless property.is_fk? -%>
<%     if property[:constraint] == 'pk' -%>
        <%= @entity.single_downcase %>New2.set<%= property.java_class_name %>(primary_key);
<%     else -%>
        <%= @entity.single_downcase %>New2.set<%= property.java_class_name %>(<%= property.fixture %>);
<%     end -%>
<%   end -%>
<% end -%>

        when(mockService.salva(any(<%= @entity.name.split('_').collect(&:capitalize).join %>DTO.class))).thenReturn(<%= @entity.single_downcase %>New2);
        this.mockMvc.perform(MockMvcRequestBuilders.post("/<%= @entity.collection_downcase %>")
                .header("Access-Control-Request-Method", "POST")
                .header("Origin", "http://localhost:8080")
                .contentType(MediaType.APPLICATION_FORM_URLENCODED_VALUE)
<% @entity.properties.each do |property| -%>
<%   unless property.is_fk? -%>
                .param("<%= property.name %>",<%= @entity.single_downcase %>New.get<%= property.java_class_name %>().toString())
<%   end -%>
<% end -%>
            )
            .andExpect(status().is3xxRedirection())
            .andExpect(MockMvcResultMatchers.redirectedUrl("/<%= @entity.collection_downcase %>/"+<%= @entity.single_downcase %>New2.get<%= @entity.as_class_name @entity.primary_key.name %>()))
            .andDo(print());
    }

    @Test
    public void salvaPut() throws Exception {
        assertThat(this.mockService).isNotNull();

        <%= @entity.name.split('_').collect(&:capitalize).join %>DTO <%= @entity.single_downcase %>Update = new <%= @entity.name.split('_').collect(&:capitalize).join %>DTO();
<% @entity.properties.each do |property| -%>
<%   unless property.is_fk? -%>
<%     if property[:constraint] == 'pk' -%>
        <%= @entity.single_downcase %>Update.set<%= property.java_class_name %>(primary_key);
<%     else -%>
        <%= @entity.single_downcase %>Update.set<%= property.java_class_name %>(<%= property.fixture %>);
<%     end -%>
<%   end -%>
<% end -%>

        when(mockService.salva(any(<%= @entity.name.split('_').collect(&:capitalize).join %>DTO.class))).thenReturn(<%= @entity.single_downcase %>Update);
        this.mockMvc.perform(MockMvcRequestBuilders.put("/<%= @entity.collection_downcase %>/"+<%= @entity.single_downcase %>Update.get<%= @entity.as_class_name @entity.primary_key.name %>())
                .header("Access-Control-Request-Method", "PUT")
                .header("Origin", "http://localhost:8080")
                .contentType(MediaType.APPLICATION_FORM_URLENCODED_VALUE)
<% @entity.properties.each do |property| -%>
<%   unless property.is_fk? -%>
                .param("<%= property.name %>",<%= @entity.name.downcase %>Update.get<%= property.camel_rather_dash firstLetter: 'upcase' %>().toString())
<%   end -%>
<% end -%>
            )
            .andExpect(status().is3xxRedirection())
            .andExpect(MockMvcResultMatchers.redirectedUrl("/<%= @entity.collection_downcase %>/"+<%= @entity.single_downcase %>Update.get<%= @entity.as_class_name @entity.primary_key.name %>()))
            .andDo(print());
    }

    @Test
    public void deleteRest() throws Exception {
        assertThat(this.mockService).isNotNull();
        
        <%= @entity.name.split('_').collect(&:capitalize).join %>DTO <%= @entity.single_downcase %>Delete = new <%= @entity.name.split('_').collect(&:capitalize).join %>DTO();

<% @entity.properties.each do |property| -%>
<%   unless property.is_fk? -%>
<%     if property[:constraint] == 'pk' -%>
        <%= @entity.single_downcase %>Delete.set<%= property.java_class_name %>(primary_key);
<%     else -%>
        <%= @entity.single_downcase %>Delete.set<%= property.java_class_name %>(<%= property.fixture %>);
<%     end -%>
<%   end -%>
<% end -%>

        when(mockService.cancella(<%= @entity.single_downcase %>Delete.get<%= @entity.as_class_name @entity.primary_key.name %>())).thenReturn(1L);
        this.mockMvc.perform(MockMvcRequestBuilders.delete("/<%= @entity.collection_downcase %>/"+<%= @entity.single_downcase %>Delete.get<%= @entity.as_class_name @entity.primary_key.name %>())
                .header("Access-Control-Request-Method", "DELETE")
                .header("Origin", "http://localhost:8080"))
            .andExpect(status().is3xxRedirection())
            .andExpect(MockMvcResultMatchers.redirectedUrl("/<%= @entity.collection_downcase %>"))
            .andDo(print());
    }

    @Test
    public void delete() throws Exception {
        assertThat(this.mockService).isNotNull();

        <%= @entity.name.split('_').collect(&:capitalize).join %>DTO <%= @entity.single_downcase %>Delete = new <%= @entity.name.split('_').collect(&:capitalize).join %>DTO();
<% @entity.properties.each do |property| -%>
<%   unless property.is_fk? -%>
<%     if property[:constraint] == 'pk' -%>
        <%= @entity.single_downcase %>Delete.set<%= property.java_class_name %>(primary_key);
<%     else -%>
        <%= @entity.single_downcase %>Delete.set<%= property.java_class_name %>(<%= property.fixture %>);
<%     end -%>
<%   end -%>
<% end -%>

        when(mockService.cancella(<%= @entity.single_downcase %>Delete.get<%= @entity.as_class_name @entity.primary_key.name %>())).thenReturn(1L);
        this.mockMvc.perform(MockMvcRequestBuilders.get("/<%= @entity.collection_downcase %>/"+<%= @entity.single_downcase %>Delete.get<%= @entity.as_class_name @entity.primary_key.name %>()+"/delete")
                .header("Access-Control-Request-Method", "GET")
                .header("Origin", "http://localhost:8080"))
            .andExpect(status().is3xxRedirection())
            .andExpect(MockMvcResultMatchers.redirectedUrl("/<%= @entity.collection_downcase %>"))
            .andDo(print());
    }
}
