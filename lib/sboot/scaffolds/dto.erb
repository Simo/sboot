package <%= @package %>.business.dtos;

<% if @entity.datetype -%>
import java.text.ParseException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
<% end -%>
import <%= @package %>.persistence.entities.<%= @entity.name.split('_').collect(&:capitalize).join %>;
<% if @entity.primary_key.is_uuid?-%>import java.util.UUID;<% end -%>

public class <%= @entity.name.split('_').collect(&:capitalize).join %>DTO {

    <% @entity.properties.each do |property| %>
    private <%= property.dto_type %> <%= property[:name].split('_').collect(&:capitalize).join.tap { |e| e[0] = e[0].downcase }%>;
    <% end %>

    public <%= @entity.name.split('_').collect(&:capitalize).join %>DTO(){}

	public <%= @entity.name.split('_').collect(&:capitalize).join %>DTO(<%= @entity.name.split('_').collect(&:capitalize).join %> entity){
		<% @entity.properties.each do |property| -%>
		<% unless property.peculiar_type? -%>
		this.<%= property[:name].split('_').collect(&:capitalize).join.tap { |e| e[0] = e[0].downcase }%> = entity.get<%= property[:name].split('_').collect(&:capitalize).join %>();
		<% else -%>
		this.<%= property[:name].split('_').collect(&:capitalize).join.tap { |e| e[0] = e[0].downcase }%> = this.toString(entity.get<%= property[:name].split('_').collect(&:capitalize).join %>());
		<% end -%>
		<% end -%>
	}

    public <%= @entity.name.split('_').collect(&:capitalize).join %> convert() <% if @entity.datetype -%>throws ParseException <% end -%>{
      <%= @entity.name.split('_').collect(&:capitalize).join %> entity = new <%= @entity.name.split('_').collect(&:capitalize).join %>();
			<% @entity.properties.each do |property| -%>
<% unless property.peculiar_type? -%>
			entity.set<%= property[:name].split('_').collect(&:capitalize).join %>(this.<%= property[:name].split('_').collect(&:capitalize).join.tap { |e| e[0] = e[0].downcase }%>);
<% else -%>entity.set<%= property[:name].split('_').collect(&:capitalize).join %>(toDate(this.<%= property[:name].split('_').collect(&:capitalize).join.tap { |e| e[0] = e[0].downcase }%>));
		<% end -%>
<% end -%>
    	return entity;
    }

<% @entity.properties.each do |property| -%>
  public <%= property.dto_type %> get<%= property[:name].split('_').collect(&:capitalize).join %>() {
		return <%= property[:name].split('_').collect(&:capitalize).join.tap { |e| e[0] = e[0].downcase }%>;
  }

  public void set<%= property[:name].split('_').collect(&:capitalize).join %>(<%= property.dto_type %> <%= property[:name].split('_').collect(&:capitalize).join.tap { |e| e[0] = e[0].downcase }%>) {
    this.<%= property[:name].split('_').collect(&:capitalize).join.tap { |e| e[0] = e[0].downcase }%> = <%= property[:name].split('_').collect(&:capitalize).join.tap { |e| e[0] = e[0].downcase }%>;
  }
<% end -%>

<% if @entity.datetype -%>
	public Date toDate(String dateString) throws ParseException {
		DateFormat formatter = new SimpleDateFormat("dd/MM/yyyy");
		Date dateToBeReturned = formatter.parse(dateString);
		return dateToBeReturned;
	}

	public String toString(Date dateDate){
		DateFormat formatter = new SimpleDateFormat("dd/MM/yyyy");
		String dateToBeReturned = formatter.format(dateDate);
		return dateToBeReturned;
	}
<% end -%>
}
