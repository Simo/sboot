package <%= @package %>.web.controllers;

import <%= @package %>.business.dtos.<%= @entity.name.split('_').collect(&:capitalize).join %>DTO;
import <%= @package %>.business.services.<%= @entity.name.split('_').collect(&:capitalize).join %>Service;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.MediaType;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;
import org.springframework.test.web.servlet.result.MockMvcResultMatchers;
import org.springframework.web.context.WebApplicationContext;

import java.util.ArrayList;
import java.util.List;

import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.view;

import static org.assertj.core.api.Assertions.*;
import static org.mockito.Mockito.*;

@RunWith(SpringRunner.class)
@SpringBootTest
@AutoConfigureMockMvc
public class <%= @entity.name.split('_').collect(&:capitalize).join %>ControllerTest {

    @Autowired
    private MockMvc mockMvc;
    @MockBean
    private <%= @entity.name.split('_').collect(&:capitalize).join %>Service mockService;
    @Autowired
    private WebApplicationContext webApplicationContext;

    private List<<%= @entity.name.split('_').collect(&:capitalize).join %>DTO> lista = new ArrayList<<%= @entity.name.split('_').collect(&:capitalize).join %>DTO>();

    <%= @entity.name.split('_').collect(&:capitalize).join %>DTO <%= @entity.single_downcase %>1;

    @Before
    public void setUp() throws Exception {
        <%= @entity.single_downcase %>1 = new <%= @entity.name.split('_').collect(&:capitalize).join %>DTO();
        <% @entity.properties.each do |property| -%>
          <%= @entity.single_downcase %>1.set<%= property[:name].capitalize %>(<%= property.fixture %>);
        <% end -%>
        lista.add(<%= @entity.single_downcase %>1);
    }

    @Test
    public void index() throws Exception {
        assertThat(this.mockService).isNotNull();
        when(mockService.trovaTutti()).thenReturn(lista);
        this.mockMvc.perform(MockMvcRequestBuilders.get("/<%= @entity.collection_downcase %>").accept(MediaType.TEXT_HTML_VALUE))
                .header("Access-Control-Request-Method", "GET")
                .header("Origin", "http://localhost:8080")
                .andExpect(status().isOk())
                .andExpect(view().name("<%= @entity.collection_downcase %>/index"))
                .andExpect(MockMvcResultMatchers.model().attributeExists("<%= @entity.collection_downcase collide: false %>"))
                .andExpect(MockMvcResultMatchers.model().attribute("<%= @entity.collection_downcase collide: false %>", lista))
                .andDo(print());
    }

    @Test
    public void dettaglio() throws Exception {
        assertThat(this.mockService).isNotNull();
        when(mockService.trova(1L)).thenReturn(this.<%= @entity.name.downcase %>1);
        this.mockMvc.perform(MockMvcRequestBuilders.get("/<%= @entity.name.downcase %>/1")
                .header("Access-Control-Request-Method", "GET")
                .header("Origin", "http://localhost:8080")
                .accept(MediaType.TEXT_HTML_VALUE))
                .andExpect(status().isOk())
                .andExpect(view().name("<%= @entity.collection_downcase %>/show"))
                .andExpect(MockMvcResultMatchers.model().attributeExists("<%= @entity.single_downcase %>"))
                .andExpect(MockMvcResultMatchers.model().attribute("<%= @entity.single_downcase %>", <%= @entity.single_downcase %>1))
                .andDo(print());
    }

    @Test
    public void nuovo() throws Exception {
        assertThat(this.mockService).isNotNull();
        this.mockMvc.perform(MockMvcRequestBuilders.get("/<%= @entity.name.downcase %>/new").accept(MediaType.TEXT_HTML_VALUE))
                .andExpect(status().isOk())
                .andExpect(view().name("<%= @entity.name.downcase %>/nuovo"))
                .andExpect(MockMvcResultMatchers.model().attributeExists("<%= @entity.name.downcase %>"))
                .andDo(print());
    }

    @Test
    public void modifica() throws Exception {
        assertThat(this.mockService).isNotNull();
        when(mockService.trova(1L)).thenReturn(this.<%= @entity.name.downcase %>1);
        this.mockMvc.perform(MockMvcRequestBuilders.get("/<%= @entity.name.downcase %>/1/edit").accept(MediaType.TEXT_HTML_VALUE))
                .andExpect(status().isOk())
                .andExpect(view().name("<%= @entity.name.downcase %>/modifica"))
                .andExpect(MockMvcResultMatchers.model().attributeExists("<%= @entity.name.downcase %>"))
                .andExpect(MockMvcResultMatchers.model().attribute("<%= @entity.name.downcase %>", <%= @entity.name.downcase %>1))
                .andDo(print());
    }

    @Test
    public void salvaPost() throws Exception {
        assertThat(this.mockService).isNotNull();
        <%= @entity.name.split('_').collect(&:capitalize).join %>DTO <%= @entity.name.downcase %>New = new <%= @entity.name.split('_').collect(&:capitalize).join %>DTO();
        <% @entity.properties.each do |property| -%>
        <%= @entity.name.downcase %>New.set<%= property[:name].capitalize %>(<%= property.fixture %>);
        <% end -%>
        <%= @entity.name.split('_').collect(&:capitalize).join %>DTO <%= @entity.name.downcase %>New2 = new <%= @entity.name.split('_').collect(&:capitalize).join %>DTO();
        <% @entity.properties.each do |property| -%>
        <%= @entity.name.downcase %>New2.set<%= property[:name].capitalize %>(<%= property.fixture %>);
        <% end -%>
        when(mockService.salva(any(<%= @entity.name.split('_').collect(&:capitalize).join %>DTO.class))).thenReturn(<%= @entity.name.downcase %>New2);
        this.mockMvc.perform(MockMvcRequestBuilders.post("/casa").contentType(MediaType.APPLICATION_FORM_URLENCODED_VALUE)
        <% @entity.properties.each do |property| -%>
          .param("<%= property.name %>",<%= @entity.name.downcase %>New.get<%= property.camel_rather_dash firstLetter: upcase %>().toString())
        <% end -%>)
                .andExpect(status().is3xxRedirection())
                .andExpect(MockMvcResultMatchers.redirectedUrl("/<%= @entity.name.downcase %>/"+<%= @entity.name.downcase %>New2.getId()))
                .andDo(print());
    }

    @Test
    public void salvaPut() throws Exception {
        assertThat(this.mockService).isNotNull();
        <%= @entity.name.split('_').collect(&:capitalize).join %>DTO <%= @entity.name.downcase %>Update = new <%= @entity.name.split('_').collect(&:capitalize).join %>DTO();
        <% @entity.properties.each do |property| -%>
        <%= @entity.name.downcase %>Update.set<%= property[:name].capitalize %>(<%= property.fixture %>);
        <% end -%>
        when(mockService.salva(any(<%= @entity.name.split('_').collect(&:capitalize).join %>DTO.class))).thenReturn(<%= @entity.name.downcase %>Update);
        this.mockMvc.perform(MockMvcRequestBuilders.put("/<%= @entity.name.downcase %>/"+<%= @entity.name.downcase %>Update.getId()).contentType(MediaType.APPLICATION_FORM_URLENCODED_VALUE)
        <% @entity.properties.each do |property| -%>
          .param("<%= property.name %>",<%= @entity.name.downcase %>Update.get<%= property.camel_rather_dash firstLetter: upcase %>().toString())
        <% end -%>)
                .andExpect(status().is3xxRedirection())
                .andExpect(MockMvcResultMatchers.redirectedUrl("/<%= @entity.name.downcase %>/"+<%= @entity.name.downcase %>Update.getId()))
                .andDo(print());
    }

    @Test
    public void deleteRest() throws Exception {
        assertThat(this.mockService).isNotNull();
        <%= @entity.name.split('_').collect(&:capitalize).join %>DTO <%= @entity.name.downcase %>Delete = new <%= @entity.name.split('_').collect(&:capitalize).join %>DTO();
        <% @entity.properties.each do |property| -%>
        <%= @entity.name.downcase %>Delete.set<%= property[:name].capitalize %>(<%= property.fixture %>);
        <% end -%>
        when(mockService.cancella(<%= @entity.name.downcase %>Delete.getId())).thenReturn(1L);
        this.mockMvc.perform(MockMvcRequestBuilders.delete("/<%= @entity.name.downcase %>/"+<%= @entity.name.downcase %>Delete.getId()))
                .andExpect(status().is3xxRedirection())
                .andExpect(MockMvcResultMatchers.redirectedUrl("/<%= @entity.name.downcase %>"))
                .andDo(print());
    }

    @Test
    public void delete() throws Exception {
        assertThat(this.mockService).isNotNull();
        <%= @entity.name.split('_').collect(&:capitalize).join %>DTO <%= @entity.name.downcase %>Delete = new <%= @entity.name.split('_').collect(&:capitalize).join %>DTO();
        <% @entity.properties.each do |property| -%>
        <%= @entity.name.downcase %>Delete.set<%= property[:name].capitalize %>(<%= property.fixture %>);
        <% end -%>
        when(mockService.cancella(<%= @entity.name.downcase %>Delete.getId())).thenReturn(1L);
        this.mockMvc.perform(MockMvcRequestBuilders.get("/<%= @entity.name.downcase %>/"+<%= @entity.name.downcase %>Delete.getId()+"/delete"))
                .andExpect(status().is3xxRedirection())
                .andExpect(MockMvcResultMatchers.redirectedUrl("/<%= @entity.name.downcase %>"))
                .andDo(print());
    }
}
